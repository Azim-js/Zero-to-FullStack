/* FlexBox FROGGY */

/* justify-content property, which aligns items horizontally and accepts the following values */

/* flex-start: Items align to the left side of the container. */
/* flex-end: Items align to the right side of the container. */
/* center: Items align at the center of the container. */
/* space-between: Items display with equal spacing between them. */
/* space-around: Items display with equal spacing around them. */

/* Level 1 */

/* Answer */

#pond {
  display: flex;
  justify-content: flex-end;
}

/* Level 2 */

/* Use justify-content again to help these frogs to go to their lilypads.
 Remember that this CSS property aligns items horizontally and accepts the following values */

/* Answer */

#pond {
  display: flex;
  justify-content: center;
}

/* level 3 */

/* Help all three frogs find their lillypads just by using justify-content.
    This time, the lilypads have lots of space all around them. */

/* If you find yourself forgetting the possible values for a property, 
    you can click on the property name to view them. */

/* Answer */

#pond {
  display: flex;
  justify-content: space-around;
}

/* level 4 */

/* Now the lillypads on the edges have drifted to the store, increasing the space
    between them. Use justify-content. This time the lillypads have equal spacing between them. */

/* Answer */

#pond {
  display: flex;
  justify-content: space-between;
}

/* level 5 */

/* Now use alig-items to help the frogs get to the bottom of the pond. 
    This CSS property aligns items vertically and accepts the following values: */

/* flex-start: Items align to the top of the container. */
/* flex-end: Items align to the bottom of the container. */
/* center: Items align at the vertical center of the container. */
/* basline: Items display at the basline of the containers. */
/* stretch: Items are stretched to fit the container */

/* Answer */

#pond {
  display: flex;
  align-items: flex-end;
}

/* level 6 */

/* Lead the frog to the center of the pond using a combination of justify-content and align-items */

/* Answer */

#pond {
  display: flex;
  justify-content: center;
  align-items: center;
}

/* level 7 */

/* The frogs need to cross the pond again, this time for some lily pads with 
    plenty of space around them. Use a combination of justify-content and align-items. */

/* Answer */

#pond {
  display: flex;
  justify-content: space-around;
  align-items: flex-end;
}

/* level 8 */

/* The frogs need to get in the same order as their lillypads using
    a flex-direction. This CSS property defines the direction items are 
    placed in the container, and accepts the following values: */

/* row: Items are placed the same as the text direction */
/* row-reverse: Items are placed opposite to the text direction. */
/* column: Items are placed top to bottom. */
/* column-reverse: Items are placed bottom to top */

/* Answer */

#pond {
  display: flex;
  flex-direction: row-reverse;
}

/* level 9 */

/* Help the frogs find thier column of lilypads using flex-direction. this CSS
 property defines the direction items are placed in the container, and accepts
 the following values: */

/* Answer */

#pond {
  display: flex;
  flex-direction: column;
}

/* level 10 */

/* Help the frogs get to their own lilypads. Although they seem close, it will take
    both flex-direction and justify-content to get them there. */

/* Notice that when you set the direction to reversed row or column, start and end
 are also reversed */

/* Answer */

#pond {
  display: flex;
  flex-direction: row-reverse;
  justify-content: flex-end;
}

/* level 11 */

/* Help the frogs find their lilypads using flex-direction and justify-content. */

/* Notice that when the flex direction is a column, justify-content changes to the vertical and align-items to the horizontal */

/* Answer */

#pond {
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
}

/* level 12 */

/* Help the frogs find thier lilypads using flex-direction and justify-content */

/* Answer */

#pond {
  display: flex;
  flex-direction: column reverse;
  justify-content: space-between;
}

/* level 13 */

/* Help the frogs find their lillypads using flex-direction, justify-content, and align-items. */

/* Answer */

#pond {
  display: flex;
  flex-direction: row-reverse;
  justify-content: center;
  align-items: flex-end;
}

/* level 14 */

/* Sometimes reversing the row or column order of a container is not enough. In these cases, we can 
    apply the order property to individual items.Byt default, items have a value of 0, but we can use
    this property to also set it to a positive or negative integer value(-2,-1,0,1,2) */

/* Use the order property to reorder the frogs according to their lilypads. */

/* Answer */

#pond {
  display: flex;
}

.yellow {
  order: 1;
}

/* level 15 */

/* Use the order property to send the red frog to his lilypad */

/* Answer */

#pond {
  display: flex;
}

.red {
  order: -1;
}

/* level 16 */

/* Another property you can apply to individual items is align-self.
 This property accepts the same values as align-items and its value for the specific item */

/* Answer */

#pond {
  display: flex;
  align-items: flex-start;
}

.yellow {
  align-self: flex-end;
}

/* level 17 */

/* Combine order with align-self to help the frogs to their destinations */

/* Answer */

#pond {
  display: flex;
  align-items: flex-start;
}

.yellow {
  order: 1;
  align-self: flex-end;
}

/* level 18 */

/* Oh no ! The frogs are all squeezed onto a single row of lilypads.
  spread them out using the flx-wrap property, which accepts the following values: */

/* nowrap: Every item is fit to a single line. */
/* wrap: items wrap around to additional lines. */
/* wrap-reverse: Items wrap around to additional lines in reverse */

/* Answer */

#pond {
  display: flex;
  flex-wrap: wrap;
}

/* level 19 */

/* Help this army of frogs form three orderly columns using a combination of flex-direction
 and flex-wrap */

/* Answer */

#pond {
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
}

/* level 20 */

/* flex-direction + flex-wrap = flex-flow */

/* The two properties flex-direction and flex-wrap are used often together that
  the shorthand property flex-flow was created to combine them. This shorthand property
  accepts the value of the two properties seprated by a space. */

/* For example, you can use flex-flow: row wrap to set rows and wrap them.  */

/* Answer */

#pond {
  display: flex;
  flex-flow: column wrap;
}

/* level 21 */

/* The frogs are spread all over the pond, but the lilypads are bunched at the top.
  you can use the align-content to set how multiple lines are spaced apart from 
  each other. This property takes the following values: */

/* flex-start: Lines are packed at the top of the container. */
/* flex-end: Lines are packed at the bottom of the container. */
/* center: Lines are packed at the vertical center of the container. */
/* space-between: Lines display with equal spacing between them. */
/* space-around: Lines display with equal spacing around them. */
/* stretch: Lines are strteched to fit the container. */

/* This can be confusing, but align-content determines the spacing between lines, 
   while align-items determines the items as a whole are aligned within the container.
   When there is only one line, align-content has no effect.  */

/* Answer */

#pond {
  display: flex;
  flex-wrap: wrap;
  align-content: flex-start;
}

/* level 22 */

/* Now the current has bunched the lilypad at the bottom. Use align-content
  to guide the frogs there. */

/* Answer */

#pond {
  display: flex;
  flex-wrap: wrap;
  align-content: flex-end;
}

/* level 23 */

/* The frogs have had a party, but it is time to go home. Use a combination
  of flex-direction and align-content to get them to their lilypads */

/* Answer */

#pond {
  display: flex;
  flex-wrap: wrap;
  flex-direction: column-reverse;
  align-content: center;
}

/* level 24 */

/* Bring the frogs hoe ne last time by using the CSS properties you've learned: */

/* justify-content */
/* align-items */
/* flex-direction */
/* order */
/* align-self */
/* flex-wrap */
/* flex-flow */
/* align-content */

/* Answer */

#pond {
  display: flex;
  flex-flow: column-reverse wrap-reverse;
  justify-content: center;
  align-content: space-between;
}
